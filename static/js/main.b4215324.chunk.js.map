{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","state","translate","handleNextClick","stepInPx","maxTranslate","infinite","setState","prevState","handlePrevClick","this","props","images","step","itemWidth","frameSize","animationDuration","length","stylesList","width","stylesLi","transform","transition","className","type","onClick","disabled","style","map","image","i","src","alt","Component","App","name","min","max","value","onChange","event","target","checked","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b4215324.chunk.js","sourcesContent":["import { Component } from 'react';\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[];\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n};\n\ntype State = {\n  translate: number;\n};\n\nexport class Carousel extends Component<Props, State> {\n  state: Readonly<State> = {\n    translate: 0,\n  };\n\n  handleNextClick = (\n    stepInPx: number,\n    maxTranslate: number,\n    infinite: boolean,\n  ) => {\n    if (this.state.translate > -maxTranslate + stepInPx) {\n      this.setState(prevState => (\n        { translate: prevState.translate - stepInPx }\n      ));\n    }\n\n    if (this.state.translate === -maxTranslate && infinite) {\n      this.setState({ translate: 0 });\n    } else if (this.state.translate < -maxTranslate + stepInPx) {\n      this.setState({ translate: -maxTranslate });\n    }\n  };\n\n  handlePrevClick = (\n    stepInPx: number,\n    maxTranslate: number,\n    infinite: boolean,\n  ) => {\n    if (this.state.translate <= -stepInPx) {\n      this.setState(prevState => (\n        { translate: prevState.translate + stepInPx }\n      ));\n    }\n\n    if (this.state.translate === 0 && infinite) {\n      this.setState({ translate: -maxTranslate });\n    } else if (this.state.translate > -stepInPx) {\n      this.setState({ translate: 0 });\n    }\n  };\n\n  render() {\n    const {\n      images,\n      step,\n      itemWidth,\n      frameSize,\n      animationDuration,\n      infinite,\n    } = this.props;\n\n    const { translate } = this.state;\n    const maxTranslate = images.length * itemWidth - frameSize * itemWidth;\n    const stepInPx = step * itemWidth;\n\n    const stylesList = {\n      width: `${itemWidth * frameSize}px`,\n    };\n\n    const stylesLi = {\n      transform: `translateX(${translate}px`,\n      transition: `transform ${animationDuration}ms`,\n    };\n\n    return (\n      <div className=\"Carousel\">\n        <button\n          className=\"Carousel__button\"\n          type=\"button\"\n          onClick={() => this.handlePrevClick(stepInPx, maxTranslate, infinite)}\n          disabled={this.state.translate === 0 && !infinite}\n        >\n          &#9668;\n        </button>\n\n        <ul className=\"Carousel__list\" style={stylesList}>\n          {images.map((image, i) => (\n            <li\n              key={image}\n              style={stylesLi}\n            >\n              <img\n                src={image}\n                alt={`${i}`}\n                style={{ width: `${itemWidth}px` }}\n              />\n            </li>\n          ))}\n        </ul>\n\n        <button\n          className=\"Carousel__button\"\n          type=\"button\"\n          onClick={() => this.handleNextClick(\n            stepInPx,\n            maxTranslate,\n            infinite,\n          )}\n          disabled={this.state.translate === -maxTranslate && !infinite}\n          data-cy=\"next\"\n        >\n          &#9658;\n        </button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport { Carousel } from './components';\n\ninterface State {\n  images: string[];\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    step: 3,\n    frameSize: 3,\n    itemWidth: 130,\n    animationDuration: 1000,\n    infinite: false,\n  };\n\n  render() {\n    const {\n      images,\n      step,\n      frameSize,\n      itemWidth,\n      animationDuration,\n      infinite,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        {/* eslint-disable-next-line */}\n        <h1 data-cy=\"title\">Carousel with {images.length} images</h1>\n\n        <div className=\"parameters-of-carousel\">\n          <label className=\"parameters-of-carousel__label\">\n            Choose item width in px:\n            <input\n              className=\"parameters-of-carousel__input\"\n              name=\"itemWidth\"\n              type=\"number\"\n              min={50}\n              max={300}\n              value={itemWidth}\n              onChange={(event) => {\n                this.setState({ itemWidth: +event.target.value });\n              }}\n            />\n          </label>\n\n          <label className=\"parameters-of-carousel__label\">\n            Choose frame size:\n            <input\n              className=\"parameters-of-carousel__input\"\n              name=\"frameSize\"\n              type=\"number\"\n              min={1}\n              max={images.length}\n              value={frameSize}\n              onChange={(event) => {\n                this.setState({ frameSize: +event.target.value });\n              }}\n            />\n          </label>\n\n          <label className=\"parameters-of-carousel__label\">\n            Choose step:\n            <input\n              className=\"parameters-of-carousel__input\"\n              name=\"step\"\n              type=\"number\"\n              min={1}\n              max={images.length}\n              value={step}\n              onChange={(event) => {\n                this.setState({ step: +event.target.value });\n              }}\n            />\n          </label>\n\n          <label className=\"parameters-of-carousel__label\">\n            Choose animation duration in ms:\n            <input\n              className=\"parameters-of-carousel__input\"\n              name=\"animationDuration\"\n              type=\"number\"\n              min={250}\n              max={3000}\n              value={animationDuration}\n              onChange={(event) => {\n                this.setState({ animationDuration: +event.target.value });\n              }}\n            />\n          </label>\n\n          <div className=\"parameters-of-carousel__isInfinite\">\n            Is carousel infinite:\n            <div className=\"parameters-of-carousel__container\">\n              <div className=\"parameters-of-carousel__radio\">\n                <input\n                  name=\"infinite\"\n                  type=\"radio\"\n                  value=\"y\"\n                  onClick={() => {\n                    this.setState({ infinite: true });\n                  }}\n                />\n                Yes\n              </div>\n\n              <div className=\"parameters-of-carousel__radio\">\n                <input\n                  name=\"infinite\"\n                  type=\"radio\"\n                  value=\"n\"\n                  checked={!infinite}\n                  onClick={() => {\n                    this.setState({ infinite: false });\n                  }}\n                />\n                No\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <Carousel\n          images={images}\n          step={step}\n          frameSize={frameSize}\n          itemWidth={itemWidth}\n          animationDuration={animationDuration}\n          infinite={infinite}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}